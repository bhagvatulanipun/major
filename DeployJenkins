#!groovy

/*
* Jenkins shared library
*/
@Library('major')_

// Pipeline
pipeline {
    agent any

    // Pipeline options
    options {
        timeout(time: 1, unit: 'HOURS')
        ansiColor('xterm')
    }

    // Environment specific parameters to be used throughout the pipeline
    environment {

        // Application specific parameters
        REGION = "us-east-1"
        // AWS specific parameters
        CLUSTER_NAME = "major-cluster"
        SERVICE_NAME = "major-app-svc"
        TASK_FAMILY = "major-app-td"
        ECS_IMAGE_TO_DEPLOY = "254110345317.dkr.ecr.us-east-1.amazonaws.com/major:app_v4"


        // dev config
        VPC = "vpc-00e339dc940810ab5"
        //ALB_ARN = "arn:aws:elasticloadbalancing:eu-west-2:466803351965:loadbalancer/app/icm-dev-lb/02aa38573ac93bed"
 //       DEV_ALB_HTTP_LISTENER_ARN = "arn:aws:elasticloadbalancing:eu-west-2:466803351965:listener/app/icm-dev-lb/02aa38573ac93bed/2c8b1efb4e0c4dc2"
   //     DEV_ALB_HTTPS_LISTENER_ARN = "arn:aws:elasticloadbalancing:eu-west-2:466803351965:listener/app/icm-dev-lb/02aa38573ac93bed/f777b76b6ff73aae"
     //   LOAD_BALANCER = "major-app-lb"
       // TARGET_GROUP = "major-app-tg"

    }

    // Pipeline Stages
    stages {

        // Clean Jenkins workspace
        stage('Clean workspace') {
            steps {
                script {
                    log.info("Executing Stage 1: Clean workspace")

                    /* Logic starts here */

                    cleanWs()

                    /* Logic ends here */

                    log.success("Completed Stage 1: Clean workspace")
                }
            }
        }

        // Deploy to specified platforms
        stage('Deploy') {
            steps {
                script {
                        log.info("Executing Stage 2: Deploy")
                            /* Logic starts here */
                                def service = "major-app-svc"
                                def taskFamily = "major-app-td"
                                def taskName = "major-app-td"

                                def isServiceExists = awsHelper.isECSServiceExists("${env.CLUSTER_NAME}", service, "${REGION}")

                                if (isServiceExists == 0) {
                                    log.info("Service already exists, No need to create stack.")
                                    log.info("Deploying now...")
                                    ecs.deploy("${env.CLUSTER_NAME}", service, taskFamily, "${env.ECS_IMAGE_TO_DEPLOY}", "${REGION}", true)
                                    log.success("Deployment done.")
                                } else {
                                    log.info("New branch setup: Creating task definition now")

                                    def isTaskDefCreated = awsHelper.registerTaskDefinition(taskFamily, taskName,
                                            512, "${env.ECS_IMAGE_TO_DEPLOY}", "1", 80, "${REGION}")

                                    if (isTaskDefCreated != 0) {
                                        currentBuild.result = 'FAILED'
                                        error("Error while creating TaskDefinition.")
                                    }

                                    log.success("TaskDefinition created successfully.")
                                    log.info("Creating service now.")

                                    def isServiceCreated = awsHelper.createECSService(service, "${env.CLUSTER_NAME}", taskFamily,
                                            1, "${tgArn}", taskName, 80, "${REGION}")

                                    if (isServiceCreated != 0) {
                                        currentBuild.result = 'FAILED'
                                        error("Error while creating service. Marking the status of build FAILED.")
                                    }
                                    log.success("Service created successfully. Waiting for service to be stable.")
                                    ecs.wait("${env.CLUSTER_NAME}", service, "${REGION}")
                                    log.success("Deployment done.")
                                }


                            }
                            /* Logic ends here */

                            log.success("Deployment completed for global audience")
                        }
                        

    // Post actions
    post {
        aborted {
            script {
                log.info("###############################")
                log.info('Build process is aborted')
                helper.notifySlack("warning", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was aborted.")
                log.info("###############################")
            }
        }
        failure {
            script {
                log.error("#############################")
                log.error('Build process failed.')
                helper.notifySlack("danger", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was failed.")
                log.error("#############################")
            }
        }
        success {
            script {
                log.success("#################################################")
                log.success('Build process completed successfully.')
                log.success("#################################################")
                }
        }
   
}

